rails generate model Standard name:string code:string sequence:integer
rails generate model Subject name:string code:string
rails generate model Stream name:string code:string sequence:integer subject:references
rails generate model Chapter name:string code:string seq_stream:integer seq_standard:integer subject:references stream:references 
rails generate model Topic name:string code:string sequence:integer chapter:references
rails generate model SubTopic name:string code:string sequence:integer topic:references
rails generate model QuestionType name:string code:string sequence:integer image_url:string sub_topic:references

rails generate model RankName code:string sequence:integer display_text:string explainer:string 

rails generate model GameHolder name:string code:string sequence:integer game_type:string image_url:string latest_sequence:integer game_count:integer question_type:references rank_name:references

rails generate model AutoQuestion question_tag:string answer_tag:string question_type:references

rails generate model GameSession attempt_date:date game_holder:references

rails generate model DifficultyLevel name:string code:string sequence:integer value:integer
rails generate model Benifit code:string title:string explainer:string sequence:integer image_url:string 

rails generate model WorkingRule name:string code:string sequence:integer question_text:string game_holder:references difficulty_level:references
rails generate model PracticeQuestion name:string code:string sequence:integer question_text:string option_text:string game_holder:references auto_question:references difficulty_level:references

rails generate model WordQuestion text:string hint:string explaination:string sequence:integer correct_count:integer  game_holder:references difficulty_level:references

rails generate model AnswerOption text:string correct:boolean word_question:references


rails generate model User first_name:string last_name:string email:string encrypted_password:string reset_password_token:string reset_password_sent_at:date sign_in_count:integer current_sign_in_at:date last_sign_in_at:date current_sign_in_ip:string last_sign_in_ip:string remember_created_at:date confirmation_token:string confirmed_at:date confirmation_sent_at:date

rails generate model UserPhoneNumber number:string user:references
rails generate model AuthToken number:string auth_token:string otp:integer device_id:string user:references user_phone_number:references

rails generate model UserAcadProfile acad_entity:references{polymorphic}:index user:references

rails generate model GameAttempt game:references{polymorphic}:index game_session:references user:references
rails generate model AttemptScore value:decimal time_taken:decimal correct_count:integer incorrect_count:integer seen:boolean passed:boolean failed:boolean game_attempt:references game_holder:references
rails generate model AcadEntityScore average_value:decimal max_value:decimal last_value:decimal time_spent:decimal passed_count:integer failed_count:integer seen_count:integer percentile:decimal acad_entity:references{polymorphic}:index attempt_score:references

rails generate model Region code:string display_text:string region_type:string parent_region:references
//Remove "foreign_key true"from migration file, t.references :parent_region
//Add to region.rb 
has_many :sub_regions, class_name: “Region”, foreign_key: “parent_region_id”
belongs_to :parent_region, class_name: “Region”

rails generate model UserRegion registration_date:date user:references region:references
rails generate model RegionPercentileScore percentile_count:integer score:decimal acad_entity:references{polymorphic}:index region:references
//Index name is way too long. Add to migration file
t.references :acad_entity, polymorphic: true, index: {:name => "index_region_percentile_scores_on_acad_entity"} 





rails generate model Exam name:string sequence:integer exam_date:date code:string
rails generate model ExamSet name:string sequence:integer exam_date:date code:string exam:references 
rails generate model ExamAttempt name:string exam:references exam_set:references user:references
rails generate model TargetExam name:string 

rails generate model Question text:string bonus:boolean sequence:integer hint_text:string partial:boolean correct_score:integer incorrect_score:integer blank_score:integer per_option_score:integer difficulty_level:references subject:references standard:references chapter:references stream:references topic:references subtopic:references exam:references exam_set:references
rails generate model Answer text:string option_text:string sequence:integer correct:boolean question:references 

rails generate model AttemptAnswer answer:references question:references exam_attempt:references
//Add ScoreName first
rails generate model ScoreName display_text:string min:decimal min_include:boolean max:decimal max_include:boolean
//Change user:references exam:references to -> exam_attempt:references; Add value:decimal, percentage:decimal effective_score:decimal score_name:references; Change Name to UserEntityScore
rails generate model UserEntityScore value:decimal percentage:decimal effective_score:decimal entity:references{polymorphic}:index exam_attempt:references exam_set:references score_name:references correct_count:integer incorrect_count:integer bonus_count:integer partial_count:integer blank_count:integer

rails generate model UserQuestionScore correct:boolean incorrect:boolean blank:boolean partial:boolean value:decimal percentage:decimal effective_score:decimal question:references exam_attempt:references exam_set:references score_name:references
rails db:migrate

rails generate controller api/question
//Change heading of QuestionController to "class Api::QuestionController < ApiController"

//Pending

//:Group , display_text (State, All India, Study Center)
//Per exam attempt, per target exam :Spi
rails generate model Spi value:decimal exam_attempt:references target_exam:references

//Per exam attempt, per entity :Weak entities
rails generate model WeakEntity exam_attempt:references entity:references{polymorphic}:index

//Per exam, per entity, :average score
//Per exam, per entity, :maximum score
//Per exam, per entity, :highest score
rails generate model ExamReferenceScore average:decimal maximum:decimal highest:decimal lowest:decimal exam:references entity:references{polymorphic}:index

//Per exam attempt, per entity, :student score
//Per exam attempt, per entity, :student percentage
//Per exam attempt, per entity, :student percentile
//Per user entity score, :student rank
rails generate model UserGroupReferenceScore percentile:decimal rank:integer entity_score:references group:references{polymorphic}:index entity:references{polymorphic}:index 

//Per exam, per difficulty level, :total question count
rails generate model ExamDifficultyBreakup count:integer exam:references difficulty_level:references

//Per exam attempt, per difficulty level, :correct question count
//Per exam attempt, per difficulty level, :incorrect question count
//Per exam attempt, per difficulty level, :attempted question count
rails generate model UserExamDifficultyBreakup correct:integer incorrect:integer attempted:integer exam_attempt:references difficulty_level:references

//Per exam_attempt, per entity, :effective score (out of 0 and 1)
//:score name